{"version":3,"sources":["UserContext.js","User/useLogin.js","SignIn/SignIn.js","Navbar/UserTag.js","Navbar/Navbar.js","User/useSignUp.js","SignUp/SignUp.js","App.js","serviceWorker.js","index.js"],"names":["React","createContext","user","setUser","useLogin","useContext","User","e","a","preventDefault","axios","post","email","target","value","password","res","data","status","alert","response","message","SignIn","login","className","onSubmit","htmlFor","type","name","UserTag","onClick","Axios","get","MyNavbar","Navbar","bg","expand","to","Toggle","aria-controls","Collapse","id","Nav","useSignUp","passwordConfirm","role","SignUp","signUp","App","useState","useEffect","withCredentials","Provider","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.cd1c2782.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext({\n    user:{},\n    setUser:() => {}\n});","import {useContext} from 'react';\nimport User from '../UserContext';\nimport axios from 'axios';\n\nfunction useLogin(){\n    const {setUser} = useContext(User);\n    return async function(e){\n        e.preventDefault();\n        try{\n            const res = await axios.post('/api/v1/users/',{\n                email:e.target.email.value,\n                password:e.target.password.value\n            });\n            if(res.data.status===\"success\"){\n                setUser(res.data.user);\n            }\n            else alert(\"Unexpected Response\");\n        }\n        catch(err){\n            if(err.response)\n            alert(err.response.data.message);\n            else \n            alert(err);\n        }\n    }\n}\n\nexport default useLogin;","import React, { useContext } from 'react';\nimport useLogin from '../User/useLogin';\nimport User from '../UserContext';\nimport {Redirect} from 'react-router-dom';\n\nfunction SignIn(){\n    const login = useLogin();\n    return (\n        <div>\n        <div className=\"container\">\n            <form onSubmit={login} >\n                <div className=\"form-group\">\n                    <label htmlFor=\"email\" >Email</label>\n                    <input type=\"email\" name=\"email\" className=\"form-control\"/>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"email\" >Password</label>\n                    <input type=\"password\" name=\"password\" className=\"form-control\"/>\n                </div>\n                <div className=\"form-group row justify-content-end\">\n                    <input type=\"submit\" className=\"btn btn-primary\"/>\n                </div>\n            </form>\n        </div>        \n    </div>     \n    )\n}\n\nexport default SignIn;","import React, {useContext} from 'react';\nimport User from '../UserContext';\nimport Axios from 'axios';\n\nfunction UserTag(){\n    const {user,setUser} = useContext(User);\n    let status;\n    if(user)\n    status='logged in';\n    else status = 'logged out'\n    const result = <p>{status}<button onClick={()=>{Axios.get(\"api/v1/users/logout\"); setUser(null)}}>logOut</button></p>\n    return result;\n}\n\nexport default UserTag;","import React from 'react';\nimport {Navbar, Nav} from 'react-bootstrap';\nimport UserTag from './UserTag';\nimport {Redirect,Link} from 'react-router-dom';\n\nfunction MyNavbar(){\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Link className=\"navbar-brand\" to=\"/\">iTiles</Link>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                <Link className=\"nav-link\" to=\"/home\">Home</Link>\n                <Link className=\"nav-link\" to=\"/signin\">Sign In</Link>\n                <Link className=\"nav-link\" to=\"/signup\">Sign Up</Link>\n                </Nav>\n                <UserTag/>\n            </Navbar.Collapse>\n        </Navbar>\n    )\n}\n\nexport default MyNavbar;","import {useContext} from 'react';\nimport User from '../UserContext';\nimport axios from 'axios';\nfunction useSignUp(){\n    const {setUser} = useContext(User);\n    return async function(e){\n        e.preventDefault();\n        try{\n            const res = await axios.post('/api/v1/users/',{\n                email:e.target.email.value,\n                password:e.target.password.value,\n                passwordConfirm:e.target.passwordConfirm.value,\n                role:e.target.role.value\n            });\n            if(res.data.status===\"success\"){\n                setUser(res.data.user);\n            }\n            else alert(\"Unexpected Response\");\n        }\n        catch(err){\n            if(err.response)\n            alert(err.response.data.message);\n            else \n            alert(err);\n        }\n    }\n}\n\nexport default useSignUp;","import React from 'react';\nimport useSignUp from '../User/useSignUp';\n\nfunction SignUp(){\n    const signUp = useSignUp();\n    return (\n    <div>\n        <div className=\"container\">\n            <form onSubmit={signUp} >\n                <div className=\"form-group\">\n                    <label htmlFor=\"email\" >Email</label>\n                    <input type=\"email\" name=\"email\" className=\"form-control\"/>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"password\" >Password</label>\n                    <input type=\"password\" name=\"password\" className=\"form-control\"/>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"passwordConfirm\" >Password</label>\n                    <input type=\"password\" name=\"passwordConfirm\" className=\"form-control\"/>\n                </div>\n                <div className=\"form-group\">\n                    <select name=\"role\">\n                        <option value=\"customer\">Customer</option>\n                        <option value=\"vendor\">Vendor</option>\n                    </select>\n                    <div className=\"form-group row justify-content-end\">\n                        <input type=\"submit\" className=\"btn btn-primary\"/>\n                    </div>\n                </div>\n            </form>\n        </div>        \n    </div>     \n    )\n}\n\nexport default SignUp;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport SignIn from './SignIn/SignIn';\nimport MyNavbar from './Navbar/Navbar';\nimport SignUp from './SignUp/SignUp';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {Switch, BrowserRouter as Router, Route, Redirect} from 'react-router-dom';\nimport User from './UserContext';\n\nfunction App(){\n  const [user,setUser] = useState(null);\n  useEffect(()=>{\n    (async function(){\n    try{\n    const res = await axios.get('api/v1/users/',{withCredentials:true});\n    setUser(res.data.user);\n    }\n    catch(err){\n    }\n  })();\n},[]);\n  return (\n    <User.Provider value={{user,setUser}}>\n      <Router>\n      <MyNavbar/>\n      {user  ? <Redirect to=\"/home\"/>: null}\n        <Switch>\n            <Route exact path=\"/signin\">\n              <SignIn/>\n            </Route>\n            <Route exact path=\"/signup\">\n              <SignUp/>\n            </Route>\n          </Switch>\n      </Router>\n    </User.Provider>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}